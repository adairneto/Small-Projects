
* Introduction

Different kinds of structures are needed to organize different kinds of data.

Examples: English dictionary, City map, cash books.

*Definition.* A *data structure* is a way to store and organize data, so that it can be used efficiently.

Aspects of Data Structures:

1. *Mathematical/Logical models or Abstract Data Types (ADT)*: What are the features and operations that define a given data structure?

2. *Implementation*: How are they defined in a language like C/C++?

*Definition.* *Abstract data types* are entities that define data and operations, but no implementation.

Examples of ADTs: arrays, linked list, stack, queue, tree, graph.

* Arrays

*Definition.* *Lists* are collection of objetcs of the same type.

Lists as an ADT:

- Store a given number of elements of a given data type (*static list*).

- Write/modify element at a position.

- Read element at a given position.

E.g. arrays in C:

#+begin_src C
  int A[10];
  int i, j;
  A[i] = j
  printf("%d", A[i]);
#+end_src

What if the list is dynamic, i.e., can grow whenever needed?

*Dynamic list*:

- Empty list if has size zero.

- Insert elements.

- Remove elements.

- Count elements in the list.

- Read/modify element at a position.

- Specify data type.

How to implement dynamic lists with arrays?

#+begin_src C
  #define MAXSIZE 100;
  int A[MAXSIZE];
  int end = -1; /* empty list */
  insert(2);
  insert(4);
  insert(6);
  insert(7);
  insert(9);
  insert(5,2); /* adds '5' to the position '2', moving everything else to the right */
  remove(0);   /* removes the element at index zero and moves everything else to the left */
#+end_src

What happens when the list fills the whole array?

When the array is full, create a new larger array (double the size), copying previous array into the new array. And free the memory for the previous array.

What are the computational costs of this implementation?

1. Access (read/write) at an index: constant time $\mathcal{O}(1)$.

2. Insert: the time will be proportional to the size of the list $n$. I.e., $\mathcal{O}(n)$.

3. Remove: the same as insert.

An additional problem: is not memory efficient, occupying non-used space.

* Linked List

While an array is a large contiguous block of memory, linked lists don't need adjacent blocks of memory. How to next these blocks?

Store an additional block of information with the address of the next block (also called *node*), which is called a *pointer* and the key with the value stored. We can use '0' to denote the end of the list. 

#+begin_src c
  struct Node {
    int data;
    struct Node* next;
  };
#+end_src

Access of the head node gives us access to the whole list.

Since the list must be "travelled" to find a given element, access will be proportional to the size of the list. I.e., $\mathcal{O}(n)$.

Insert: creates a node with a pointer to the next element and rearrange the pointer of the previous element to point to it. Cost: $\mathcal{O}(n)$.

Remove: $\mathcal{O}(n)$.

Uses less memory than simple lists.

** Array vs. Linked List

What is the most frequent operation that I want to use?

What is the size of the data?

|                 | **Array**                                                                                                         | **Linked List**                                                     |
|-----------------|-------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------|
| **Access**      | O(1)                                                                                                              | O(n)                                                                |
| **Memory**      | Fixed memory, may not be available as one large block                                                             | No unused memory, but extra memory for pointer variable             |
| **Insert**      | a) At beginning - O(n)<br>b) At end - O(1) if array is not full or O(n) if array is full<br>c) At ith pos. - O(n) | a) At beginning - O(1)<br>b) At end - O(n)<br>c) At ith pos. - O(n) |
| **Ease of use** | Easier                                                                                                            | More complicated (segmentation fault, memory leaks)                 |

** Linked List: Implementation

Node will be a data type with two fields containing the data and the next.

Two operations:

1. Insert a node into a linked list.

2. Traverse the linked list

#+begin_src c
  #include <stdio.h>
  #include <stdlib.h>

  struct Node {
    int data;
    struct Node* next;
  };

  int main()
  {
      /* Pointer to the head node */
      struct Node* A;
      A = NULL; /* empty list */
    
      /* Inserting a node */
      struct Node* temp = (struct Node*)malloc(sizeof(struct Node)); /* Malloc returns the address to the memory block */
      (*temp).data = 2; /* is the same as 'temp->data = 2' */
      (*temp).next = NULL;
      A = temp;
    
      temp = (struct Node*)malloc(sizeof(struct Node));
      temp->data = 4;
      temp->next = NULL;
    
      struct Node* temp1 = A;
      while(temp1->next != NULL) {
          temp1 = temp1->next;
      };
      temp1->next = temp;

      return 0;
  }
#+end_src

#+begin_src cpp
  #include <iostream>

  using namespace std;

  struct Node {
      int data;
      Node* next;
  };

  int main()
  {
    /* Pointer to the head node */
    Node* A;
    A = NULL; /* empty list */

    /* Inserting a node */
    Node* temp = new Node();
    temp->data = 2;
    temp->next = NULL;
    A = temp;

    temp = new Node();
    temp->data = 4;
    temp->next = NULL;

    Node* temp1 = A;
    while(temp1->next != NULL) {
        temp1 = temp1->next;
    };
    temp1->next = temp;

    return 0;
  }
#+end_src

*** Inserting at the beginning

#+begin_src c
  #include <stdio.h>
  #include <stdlib.h>

  struct Node {
    int data;
    struct Node* next;
  };

  /* Pointer to the head node */
  struct Node* head;

  /* Inserts at the beginning */
  void Insert(int x) { 
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node)); // Malloc returns the address to the memory block
    (*temp).data = x; // syntatic sugar: 'temp->data = 2'
    (*temp).next = NULL;
    if(head != NULL) temp->next = head;
    head = temp;
  };

  void PrintList() {
    struct Node* temp = head;
    printf("List is:");
    while(temp != NULL) {
      printf(" %d", temp->data);
      temp = temp->next;
    };
    printf("\n");
  };

  int main()
  {
    head = NULL; // empty list

    /* Inserting nodes */
    printf("How many numbers?\n");
    int n, i, x;
    scanf("%d", &n);
    for(i = 0; i < n; i++) {
      printf("Enter the number \n");
      scanf("%d", &x);
      Insert(x);
      PrintList();
    }

    return 0;
  }
#+end_src

#+begin_src cpp
  #include <iostream>

  using namespace std;

  struct Node {
    int data;
    Node* next;
  };

  void PrintList(Node* head) {
    printf("List is:");
    while(head != NULL) {
      printf(" %d", head->data);
      head = head->next;
    };
    printf("\n");
  }

  void BeginningInsert(Node** head, int x) {
    Node* temp = new Node();
    temp->data = x;
    temp->next = NULL;
    if(*head != NULL) temp->next = *head;
    ,*head = temp;
  }

  int main()
  {
    Node* head;  // Pointer to the head node
    head = NULL; // empty list

    // Insert at Beginning
    printf("How many numbers?\n");
    int n, i, x;
    scanf("%d", &n);
    for(i = 0; i < n; i++) {
      printf("Enter the number \n");
      scanf("%d", &x);
      BeginningInsert(&head, x);
      PrintList(head);
    };

    return 0;
  }
#+end_src

*** Inserting a node at nth position

Application's memory:

1. Heap: can be called during runtime (e.g. when calling malloc).

2. Stack: all the information about function call executions and local variables.

3. Static/Global.

4. Code (Text).

#+begin_src c
  #include<stdlib.h>
  #include<stdio.h>

  struct Node {
    int data;
    struct Node* next;
  };

  struct Node* head;

  void Insert(int data, int n) {
    // Assume n to be a valid position
    struct Node* temp1 = (struct Node*)malloc(sizeof(struct Node*));
    temp1->data = data;
    temp1->next = NULL;
    if(n == 1) {
      temp1->next = head;
      head = temp1;
      return;
    };
    struct Node* temp2 = head;
    int i;
    for(i = 0; i < n-2; i++) {
      temp2 = temp2->next;
    };
    temp1->next = temp2->next;
    temp2->next = temp1;
  }

  void PrintList() {
    printf("List is:");
    while(head != NULL) {
      printf(" %d", head->data);
      head = head->next;
    };
    printf("\n");
  }

  int main() {
    head = NULL; // empty list
    Insert(2,1); // List: 2
    Insert(3,2); // List: 2, 3
    Insert(4,1); // List: 4, 2, 3
    Insert(5,2); // List: 4, 5, 2, 3
    PrintList();
  }
#+end_src

*** Delete a node at nth position

1. Fix the links

2. Free the memory

#+begin_src c
  #include<stdlib.h>
  #include<stdio.h>

  struct Node {
      int data;
      struct Node* next;
  };

  struct Node* head;

  void Insert(int data) {
      struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
      (*temp).data = data;
      (*temp).next = NULL;
    
      if(head == NULL)
        head = temp;
      else {
        struct Node* temp1 = head;
        while(temp1->next != NULL) {
          temp1 = temp1->next;
        };
        temp1->next = temp;
      }
  }
    
  void PrintList() {
      printf("List is:");
      while(head != NULL) {
        printf(" %d", head->data);
        head = head->next;
      };
      printf("\n");
  }

  void Delete(int n) {
      struct Node* temp1 = head;
      if(n == 1) {
        head = temp1->next;
        free(temp1);
        return;
      }
      int i;
      for(i = 0; i < n-2; i++) {
        temp1 = temp1->next; // Points to (n-1)th Node
      }
      struct Node* temp2 = temp1->next; // nth Node
      temp1->next = temp2->next; // (n+1)th Node
      free(temp2); // Deallocates space or `delete temp2` in C++
  }

  int main() {
      head = NULL; // empty list
      Insert(2); // List: 2
      Insert(4); // List: 2, 4
      Insert(6); // List: 2, 4, 6
      Insert(5); // List: 2, 4, 6, 5
      PrintList();
    
      int n;
      printf("Enter a position\n");
      scanf("%d", &n);
      Delete(n);
      PrintList();
      return 0;
  }
#+end_src

*** Reverse a linked list: Iterative solution

Given a linked list, a reversed list looks like this:

The head points to the last element, all the arrows are inverted, and the first element points to NULL.

The iterative solution is the following algorithm:

Traverse the list, adjusting the link to point to the previous node. At the end, reassign the head.

#+begin_src c
  #include<stdlib.h>
  #include<stdio.h>

  struct Node {
    int data;
    struct Node* next;
  };

  struct Node* Insert(struct Node* head, int data) {
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    (*temp).data = data;
    (*temp).next = NULL;

    if(head == NULL)
      head = temp;
    else {
      struct Node* temp1 = head;
      while(temp1->next != NULL) {
        temp1 = temp1->next;
      };
      temp1->next = temp;
    }
    return head;
  }

  void PrintList(struct Node* head) {
    printf("List is:");
    while(head != NULL) {
      printf(" %d", head->data);
      head = head->next;
    };
    printf("\n");
  }

  struct Node* Reverse(struct Node* head) {
      struct Node *current, *prev, *next;
      current = head;
      prev = NULL;
      // Traversing the list
      while(current != NULL) {
        next = current->next; // next Node
        current->next = prev; // previous Node
        prev = current;
        current = next;
      }
      // Adjusting the variable head
      head = prev;
      return head;
  }

  int main() {
      struct Node* head = NULL;
      head = Insert(head,2);
      head = Insert(head,4);
      head = Insert(head,6);
      head = Insert(head,8);
      PrintList(head);
      head = Reverse(head);
      PrintList(head);
  }
#+end_src

*** Print linked list using recursion

#+begin_src c
  #include<stdlib.h>
  #include<stdio.h>

  struct Node {
      int data;
      struct Node* next;
  };

  struct Node* Insert(struct Node* head, int data) {
      struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
      (*temp).data = data;
      (*temp).next = NULL;
    
      if(head == NULL)
        head = temp;
      else {
        struct Node* temp1 = head;
        while(temp1->next != NULL) {
          temp1 = temp1->next;
        };
        temp1->next = temp;
      }
      return head;
  }

  void Print(struct Node* head) {
    if(head == NULL) {
        printf("\n");
        return;
    }
    printf("%d ", head->data);
    Print(head->next);
  }

  void ReversePrint(struct Node* head) {
    if(head == NULL) {
        printf("\n");
        return;
    }
    ReversePrint(head->next);
    printf("%d ", head->data);
  }

  int main() {
      struct Node* head = NULL;
      head = Insert(head,2);
      head = Insert(head,4);
      head = Insert(head,6);
      head = Insert(head,8);
      Print(head);
      ReversePrint(head);
  }
#+end_src

*** Recursive Reverse

#+begin_src c
  #include<stdlib.h>
  #include<stdio.h>

  struct Node {
      int data;
      struct Node* next;
  };

  struct Node* Insert(struct Node* head, int data) {
      struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
      (*temp).data = data;
      (*temp).next = NULL;
    
      if(head == NULL)
        head = temp;
      else {
        struct Node* temp1 = head;
        while(temp1->next != NULL) {
          temp1 = temp1->next;
        };
        temp1->next = temp;
      }
      return head;
  }

  void Print(struct Node* head) {
    if(head == NULL) {
        printf("\n");
        return;
    }
    printf("%d ", head->data);
    Print(head->next);
  }

  void ReversePrint(struct Node* head) {
    if(head == NULL) {
        printf("\n");
        return;
    }
    ReversePrint(head->next);
    printf("%d ", head->data);
  }

  struct Node* Reverse(struct Node* head, struct Node* p) {
      if(p->next == NULL) {
        head = p;
        return head;
      }
      head = Reverse(head, p->next);
      struct Node* q = p->next;
      q->next = p;
      p->next = NULL;
      return head;
  }

  int main() {
      struct Node* head = NULL;
      head = Insert(head,2);
      head = Insert(head,4);
      head = Insert(head,6);
      head = Insert(head,8);
      Print(head);
    
      head = Reverse(head, head);
      Print(head);
  }
#+end_src

** Doubly Linked List

The idea is to add a third entry into the data structure, containing the address of the previous item.

#+begin_src c

  #include<stdio.h>
  #include<stdlib.h>

  struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
  };

  struct Node* head; // pointer to head node

  struct Node* GetNewNode(int x) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = x; // equal to (*temp).data
    newNode->prev = NULL;
    newNode->next = NULL;
    return &newNode;
  }

  void InsertAtHead(int x) {
    struct Node* newNode = GetNewNode(x);
    if(head == NULL) {
      head = newNode;
      return;
    }
    head->prev = newNode;
    newNode->next = head;
    head = newNode;
  }

  void Print() {
    struct Node* temp = head;
    printf("Forward: ");
    while(temp != NULL) {
      printf("%d ", temp->data);
      temp = temp->next;
    }
    printf("\n");
  }

  void ReversePrint() {
    struct Node* temp = head;
    if(temp == NULL) return; // empty list
    // Go to the last node
    while(temp->next != NULL) {
      temp = temp->next;
    }
    // Travelling back and printing
    printf("Reverse: ");
    while(temp != NULL) {
      printf("%d ", temp->data);
      temp = temp->prev;
    }
    printf("\n");
  }

  int main()
  {
    head = NULL;
    InsertAtHead(2); Print(); ReversePrint();
    InsertAtHead(4); Print(); ReversePrint();
    InsertAtHead(6); Print(); ReversePrint();
  }

#+end_src

- Advantage: easier to access items.

- Disadvantage: extra memory for pointer to previous node (from 8 bytes to 12 bytes).

* Stacks

We'll talk of Stacks only as an Abstract Data Type.

E.g. plates, Hanoi tower, pack of tennis balls.

The constraint is that only the top of the stack is accessible. That's why it's called `last-in-first-out'.

*Stack:* A list with the restriction that insertion and deletion can be performed only from one end, called the top.

*Operations:*

1. Push(x): inserts x;
2. Pop(): removes the most recent item;
3. Top(): returns the element at the top;
4. IsEmpty().

All operations in constant time $\mathcal{O}(1)$.

*Applications:*

- Function calls / recursion;
- Undo in an editor;
- Balanced parentheses.

** Array Implementation

#+begin_src c

  #include<stdio.h>
  #include<stdbool.h>
  #define MAX_SIZE 101
  int A[MAX_SIZE];
  int top = -1; // empty stack

  void Push(int x) {
    if(top == MAX_SIZE -1) {
      printf("Error: stack overflow\n");
      return;
    }
    A[++top] = x;
  }

  voi Pop() {
    if(top == -1) {
      printf("Error: no element to pop\n");
      return;
    }
    top--;
  }

  int Top() {
    return A[top];
  }

  bool IsEmpty() {
    if(top == -1) 
      return true;
    else
      return false;
  }

  void Print() {
    int i;
    printf("Stack: ");
    for(i = 0; i<=top; i++)
      printf("%d ", A[i]);
    printf("\n");
  }

  int main() {
    Push(2); Print();
    Push(5); Print();
    Push(10); Print();
    Pop(); Print();
    Push(12); Print();
  }

#+end_src

** Linked List Implementation

Insert/delete at the tail: O(n)
Insert/delete at the beginning: O(1)
Other operations: O(1)

#+begin_src c

  struct Node {
    int data;
    struct Node* link;
  };

  struct Node* top = NULL;

  void Push(int x) {
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node*));
    temp->data = x;
    temp->link = top;
    top = temp;
  };

  void Pop() {
    struct Node* temp;
    if(top == NULL) return;
    temp = top;
    top = top->link;
    free(temp);
  };
  
#+end_src

** Using Stack to Reverse

#+begin_src cpp

  #include<iostream>
  #include<stack>
  using namespace std;

  void Reverse(char *C, int n) {
    stack<char> S;
    for(int i=0; i<n; i++) {
      S.push(C[i]);
    }
    for(int i = 0; i<n; i++) {
      C[i] = S.top();
      S.pop();
    }
  }

  int main() {
    char C[51];
    printf("Enter a string: ");
    gets(C);
    Reverse(C, strlen(C));
    printf("Output = %s", C);
  }

#+end_src

Time complexity: O(n)
Space complexity: O(n)

** Check for balanced parentheses

Idea:
1. Scan from left to right;
2. If opening symbol, add it to a list;
3. If closing symbol, remove last opening symbol in list;
4. Should finish with an empty list.

Pseudocode:
#+begin_src c

  CheckBalancedParenthesis(exp) {
    n <- length(exp);
    create stack S;
    for i<-0 to n-1 {
        if exp[i] is '(' or '{' or '['
          Push(exp[i])
        else if exp[i] is ')' or '}' or ']'
          if (S is empty) return false
          else
            Pop()
    }
  }
  
#+end_src

* Queues

** Queue ADT

FIFO: First-In-First-Out

List or collection with the restriction that insertion can be performed at one end (tail) and deletion can be performed at the other end (head).

Operations:
1. Enqueue(x) or Push(x);
2. Dequeue() or Pop();
3. Front() or Peek();
4. IsEmpty().

All operations in constant time O(1).

Example of usage (scenario): only one request processed at the time. E.g. printers, CPUs.

** Array Implementation 

#+begin_src c

  #include<stdio.h>
  #include<stdbool.h>
  #define MAX_SIZE 101
  int A[MAX_SIZE];
  int front = -1; // empty queue
  int rear = -1; // empty queue

  void Enqueue(int x) {
    if(rear+1 == front) {
      return;
    }
    else if(IsEmpty()) {
      rear = 0;
      front = rear;
    }
    else {
      rear++;
    }
    A[rear] = x;
  }

  void Dequeue() {
    if(IsEmpty()) {
      return;
    }
    else if(front == rear) {
      rear = -1;
      front = rear;
    }
    else {
      front++;
  }

  int Front() {
    return A[front];
  }

  bool IsEmpty() {
    if(top == -1 && rear == -1) 
      return true;
    else
      return false;
  }

  void Print() {
    int i;
    printf("Queue: ");
    for(i = front; i<=rear; i++)
      printf("%d ", A[i]);
    printf("\n");
  }

  int main() {
    Enqueue(7);
    Enqueue(3);
    Enqueue(1);
    Enqueue(9);
    Print();
    IsEmpty();
    Dequeue();
    Front();
  }

#+end_src

Option: implement cyclical interpretation. Hint: use addresses modulo length of the list.

** Linked List Implementation

#+begin_src c
  #include<stdlib.h>
  #include<stdio.h>

  struct Node {
      int data;
      struct Node* next;
  };
  
  struct Node* front = NULL;
  struct Node* rear = NULL;

  void Enqueue(int x) {
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node*));
    temp->data = x;
    temp->next = NULL;
    if(front == NULL && rear == NULL) {
      front = rear = temp;
      return;
    }
    rear-> next = temp;
    rear = temp;
  }

  void Dequeue() {
    struct Node* temp = front;
    if(front == NULL) return;
    if(front == rear) {
      front = rear = NULL;
    }
    else {
      front = front->next;
    }
    free(temp);
  }
  
  void Print() {
    printf("List is:");
    while(front != NULL) {
      printf(" %d", front->data);
      front = front->next;
    };
    printf("\n");
  }
  
  int main() {
      Enqueue(2);
      Enqueue(4);
      Enqueue(6);
      Enqueue(8);
      Dequeue();
      Print();
  }
#+end_src

* Trees

Used to represent hierarchical data.

A collection of *nodes* with a link (called an *edge*) to its *children*, if appliable.
The topmost node is called *root*.
The *parent* of a node is the node immediately above it, i.e., the node which has the original node as a children.
A *sibling* is a node which has the same parent.
If a node doesn't have a child, it is called a *leaf*.

It is a *recursive data structure*.

A tree with $N$ nodes has $N-1$ edges.

*Depth of $x$*: number of edges in path from root to $x$.

*Height of $x$*: number of edges in longest path form $x$ to leaf.

*Binary Tree*: a tree in which each node can have at most two children.

#+begin_src c

  struct Node {
    int data;
    Node* left;
    Node* right;
  };
  
#+end_src

Applications:

1. Storing hierarchical data. E.g. file systems.
2. Organize data for quick search, insertion, deletion. E.g. binary search trees.
3. Trie. E.g. dictionary.
4. Network routing algorithm.

** Binary Trees

*Strict/Proper binary tree*: each node can have either two or zero children.

*Complete binary tree*: all levels except possibly the last are completely filled and all nodes are as left as possible.

Maximum number of nodes at level $i$ is $2^i$.

*Perfect binary tree*: all levels are completely filled.

Maximum number of nodes in a binary tree with heigh $h$ is $2^0 + 2^1 + \cdots + 2^h = 2^{h+1} - 1$.

In a perfect binary tree with $n$ nodes, the height is given by $n = 2^{h+1} - 1 \iff 2^{h+1} = (n+1) \iff h = \log_2 (n+1) - 1.

In a complete binary tree, the height is $\lfloor \log_2 n \rfloor$.

*Balanced binary tree*: difference between height of left and right subtree for every node is not greater than $k$ (mostly 1).

We define height of an empty tree as -1.

How can we implement binary trees?

1. Dynamically created nodes;
2. Arrays (used for heaps).

In arrays, for node at index $i$, the left-child-index is $2i+1$ and the right-child-index is $2i+2$.

** Binary Search Trees

How to store a modifiable collection?

With array, search(x) is $\mathcal{O}(n)$, insert(x) is $\mathcal{O}(1)$, and remove(x) is $\mathcal{O}(n)$. With linked list, the cost is the same.

A binary search in a sorted array costs $\mathcal{O}(\log n)$. However, insert(x) and remove(x) in a sorted array is $\mathcal{O}(n)$.

With a binary search tree, all three operations have cost $\mathcal{O}(\log n)$.

A *binary search tree* is a binary tree in which for each node, value of all the nodes in left subtree is lesser or equal and and the value of all the nodes in the right subtree is greater.

** Implementation

#+begin_src cpp

  #include<iostream>
  using namespace std;

  struct BstNode {
    int data;
    BstNode* left;
    BstNode* right;
  }

  BstNode* GetNewNode(int data) {
    BstNode* newNode = new BstNode();
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
  }

  // Function to insert in BST, returns address of the root node
  BstNode* Insert(BstNode** root, int data) {
    if(root == NULL) {
      root = GetNewNode(data);
    }
    else if(data <= root->data) {
      root->left = Insert(root->left, data);
    }
    else {
      root->right = Insert(root->right, data);
    }
    return root;
  }

  bool Search(BstNode* root, int data) {
    if(root == NULL) return false;
    else if(root->data == data) return true;
    else if(data <= root->data) return Search(root->left, data);
    else return Search(root->right, data);
  }

  int main() {
    BstNode* root = NULL; // Creating an empty tree
    root = Insert(root, 15);
    root = Insert(root, 10);
    root = Insert(root, 20);
    root = Insert(root, 25);
    root = Insert(root, 8);
    root = Insert(root, 12);

    // Ask user to enter a number
    int number;
    cout << "Enter the number to be searched:\n";
    cin >> number;
    if(Search(root, number) == true) cout << "Found \n";
    else cout << "Not found \n";
  }

#+end_src

** Find min and max

#+begin_src cpp

  int FindMin(BstNode* root) {
    if(root == NULL) {
      cout << "Error: Tree is empty\n";
      return -1;
    }
    while(root->left != NULL) {
      root = root->left;
    }
    return root->data;
  }

  int FindMax(BstNode* root) {
    if(root == NULL) {
      cout << "Error: Tree is empty\n";
      return -1;
    }
    while(root->right != NULL) {
      root = root->right;
    }
    return root->data;
  }

#+end_src

Recursive solution:

#+begin_src cpp

  int FindMin(BstNode* root) {
    if(root == NULL) {
      cout << "Error: Tree is empty\n";
      return -1;
    }
    else if(root->left == NULL) {
      return root->data;
    }
    return FindMin(root->left);
  }

  int FindMax(BstNode* root) {
    if(root == NULL) {
      cout << "Error: Tree is empty\n";
      return -1;
    }
    else if(root->right == NULL) {
      return root->data;
    }
    return FindMax(root->right);
  }

#+end_src

** Find height of a binary tree

#+begin_src cpp

  int FindHeight(BstNode* root) {
    if(root == NULL)
      return -1;
    return max(FindHeight(root->left), FindHeight(root->right)) + 1;
  }

#+end_src

Time complexity: $\mathcal{O}(n)$.

** Binary Tree Traversal

*Definition (Tree Traversal)*. The process of visiting each node in the tree exactly once in some order.

Two categories:
1. Breadth-first (level-order)
2. Depth-first
   2.1 Preorder: root, left, right
   2.2 Inorder: left, root, right
   2.3 Postorder: left, right, root

Inorder gives a binary search tree.

*** Level-order Traversal

We use a queue (FIFO). 

#+begin_src cpp

  #include<iostream>
  #include<queue>
  using namespace std;

  struct Node {
    char data;
    Node *left;
    Node *right;
  }

  void LevelOrder(Node *root) {
    if(root == NULL) return;
    queue<Node*>  Q;
    Q.push(root);
    // While there is at least one discovered node
    while(!Q.empty()) {
      Node* current = Q.front();
      cout << current->data << " ";
      if(current->left != NULL) Q.push(current->left);
      if(current->right != NULL) Q.push(current->right);
      Q.pop(); // Remove the element at front
    }
  }

#+end_src

Time complexity: $\mathcal{O}(n)$

Space completixity: $\mathcal{O}(1)$ at best, $\mathcal{O}(n)$ at worst and average case.

*** Depth-first Traversal

#+begin_src cpp

  void Preorder(Node *root) {
    if(root == NULL) return;
    printf("%c ", root->data);
    Preorder(root->left);
    Preorder(root->right);
  }

  void Inorder(Node *root) {
    if(root == NULL) return;
    Inorder(root->left);
    printf("%c ", root->data);
    Inorder(root->right);
  }

  void Postorder(Node *root) {
    if(root == NULL) return;
    Inorder(root->left);
    Inorder(root->right);
    printf("%c ", root->data);
  }

#+end_src

Time complexity: $\mathcal{O}(n)$.

Space complexity: $\mathcal{O}(h)$. In the worst case: $h = n$. Average/best case: $h = \log n$.

*** Check if a given binary tree is a BST

#+begin_src cpp

  struct Node {
    int data;
    Node *left;
    Node *right;
  }

  bool IsSubtreeLesser(Node* root, int value) {
    if(root == NULL) return true;
    if(root->data <= value
       && IsSubtreeLesser(root->left, value)
       && IsSubtreeLesser(root->right, value))
      return true;
    else
      return false;
  }

  bool IsSubtreeLesser(Node* root, int value) {
    if(root == NULL) return true;
    if(root->data > value
       && IsSubtreeGreater(root->left, value)
       && IsSubtreeGreater(root->right, value))
      return true;
    else
      return false;
  }

  bool IsBinarySearchTree(Node* root) {
    if(root == NULL) return true;
    if(IsSubtreeLesser(root->left, root->data)
       && IsSubtreeGreater(root->right, root->data)
       && IsBinarySearchTree(root->left)
       && IsBinarySearchTree(root->right))
      return true;
    else
      return false;
  }
  
#+end_src

Note: we can use find min and find max as follows.

#+begin_src cpp

  bool IsBinarySearchTree(Node* root, int minValue, int maxValue) {
    // First call: use INT_MIN and INT_MAX
    if(root == NULL) return true;
    if(root->data > minValue
       && root->data < maxValue
       && IsBinarySearchTree(root->left, minValue, root->data)
       && IsBinarySearchTree(root->right, root->data, maxValue))
      return true;
    else
      return false;
  }

#+end_src

Time-complexity: $\mathcal{O}(n)$ (it was $n^2$ in the previous case).

*** Delete a node from BST

If it's a leaf, it's enough to just delete it (Case 1). What if the node has children? 

If it has only one child, it's enough to link the parent to the only child (Case 2).

If it has two children, find the minimum in the right subtree to replace the node to be deleted (Case 3).

Notice that the minimum in the right subtree has at most one child, reducing our problem to the previous case.

Another approach: use the maximum in the left.

[[[[202212261336_deletion_bst.png]]]]

#+begin_src cpp

  #include<iostream>
  using namespace std;

  struct Node {
    int data;
    Node *left;
    Node *right;
  }

  Node* Delete(Node *root, int data) {
    if(root == NULL) return root;
    else if(data < root->data)
      root->left = Delete(root->left, data);
    else if(data > root->data)
      root->right = Delete(root->right, data);
    // Node found, starts deletion
    else {
      // Case 1: No child
      if(root->left == NULL && root->right == NULL) {
        delete root; // In C, use 'free' function
        root = NULL;
      }
      // Case 2: One child
      else if(root->left == NULL) {
        Node *temp = root;
        root = root->right;
        delete temp;
      }
      else if(root->right == NULL) {
        Node *temp = root;
        root = root->left;
        delete temp;
      }
      // Case 3: Two children
      else {
        Node *temp = FindMin(root->right);
        root->data = temp->data;
        root->right = Delete(root->right, temp->data);
      }
    }
    return root;
  }

#+end_src

*** Inorder Successor in a BST

Case 1: If the node has a right subtree, is the leftmost node in the right subtree, i.e., the minimum in the right subtree.

Case 2: If the node has no right subtree, go to the nearest ancestor for which the given node is in the left subtree.

#+begin_src cpp

  #include<iostream>
  using namespace std;

  struct Node {
    int data;
    struct Node* left;
    struct Node* right;
  }

  struct Node* FindMin(struct Node* root) {
    if(root == NULL) return NULL;
    while(root->left != NULL)
      root = root->left;
    return root;
  }

  struct Node* GetSuccessor(struct Node* root, int data) {
    // Search the Node
    struct Node* current = Find(root, data);
    if(current == NULL) return NULL;

    // Case 1: Node has right subtree
    if(current->right != NULL) {
      return FindMin(current->right);
    }

    // Case 2: No right subtree
    else {
      struct Node* successor = NULL;
      struct Node* ancestor = root;
      while(ancestor != current) {
        if(current->data < ancestor->data) {
          successor = ancestor;
          ancestor = ancestor->left;
        }
        else
          ancestor = ancestor->right;
      }
      return successor;
    }
  }

#+end_src

Time complexity: $\mathcal{O}(h)$.

* Graphs

** Introduction

*Definition (Graph).* A *graph* $G$ is an ordered pair of a set $V$ of *vertices* and a set $E$ of *edges*. Notation: $G = (V,E)$.

How to represent an edge?

Graphs can be either *directed* or *undirected*.

For directed graphs, we can represent an edge as $(u,v)$, where $u$ is the start point and $v$ is the end point.

For undirected graphs, we can represent an edge as $\{ u, v \}$.

Applications:

1. Social Network: User as nodes and friendship as an edge.

2. The web: Pages as nodes and links as edges (directed graph). Web crawling is graph traversal.

3. Road network.

Graphs can be *weighted* or *unweighted*.

A *self-loop* is an edge that links a node to itself.

A *multiedge* or *parallel edge* occurs when there are more than one edge between two given nodes.

If there are no self-loops or multiedges, the graph is called a *simple graph*.

Notice that if $|V| = n$, then $0 \leq |E| \leq n(n-1)$ if directed or $0 \leq |E| \leq \frac{n(n-1)}{2}$ if undirected.

A graph is called

1. *Sparse* if $|E| << |V|^2$.
2. *Dense* if $|E| \approx |V|^2$.

A *walk* is a sequence of vertices where each adjacent pair is connected by an edge. A walk is called a *simple path* if no vertices are repeated. A *trail* is a walk in which no edges are repeated.

A graph is called *strongly connected* if there is a path from any vertex to any other vertex.

*Closed walk*: starts and ends at the same vertex.

*Simple cycle*: no repetition other than start/end.

An *acyclic graph* is a graph with no cycle. E.g. a tree is an undirected acyclic graph.

In the rest of this section, we'll focus on how to represent graphs.

** Graph Representation

[[202212261336_graph_representations.png]]

*** Edge List

#+begin_src c

  struct Edge {
    int startVertex;
    int endVertex;
    int weight; // For weighted graphs
  }

#+end_src

#+begin_src cpp

  class Edge {
    int startVertex;
    int endVertex;
    int weight; // For weighted graphs
  }

  string vertex_list[MAX_SIZE];
  Edge edge_list[MAX_SIZE];

#+end_src

Time complexity: $\mathcal{O}(|E|)$ for finding adjacent nodes and checking if nodes are connected;

Space complexity: $\mathcal{O}(|V|+|E|)$.

*** Adjacency Matrix

\[
  A_{ij} = \begin{cases} 1, & ~\text{there exists an edge from $i$ to $j$} \\ 0, & ~\text{otherwise} \end{cases}
\]

For an undirected graph, the matrix is symmetric.

For finding adjacent nodes, the time cost is $\mathcal{O}(|V|)$.

For finding if two nodes are connected, the time cost is $\mathcal{O}(1)$.

For weighted graphs, the matrix entry can be the weight and use a default value for $i = j$.

However, the space cost is $\mathcal{O}(|V|^2)$.

Good if graph is dense or $|V|^2$ is too small.

*** Adjacency List 

#+begin_src c

  struct Node {
    int data;
    int weight;
    struct Node* next;
  }

  struct Node *A[8];

#+end_src

Space complexity: $\mathcal{O}(|E|)$.

Time complexity for finding if two nodes are connected: $\mathcal{O}(|V|)$.

Time complexity for finding adjacent nodes: $\mathcal{O}(|V|)$.

* Hash Tables

[[202212271428_hash_table.png]]

#+begin_src cpp

#include <iostream>
#include <list>
#include <cstring>
using namespace std; 

// HashTable implemented: <int, string>

class HashTable {
    private:
        static const int hashGroups = 10;
        list<pair<int, string>> table[hashGroups]; // List 1, Index 0

    public:
        bool isEmpty() const;
        int hashFunction(int key);
        void insertItem(int key, string value); 
        void removeItem(int key); 
        string searchTable(int key);
        void printTable();
};

bool HashTable::isEmpty() const {
    int sum{};
    for (int  i{}; i < hashGroups; i++) {
        sum += table[i].size();
    }

    if (!sum) {
        return true;
    }
    return false;
}

int HashTable::hashFunction(int key) {
    return key % hashGroups; 
}

void HashTable::insertItem(int key, string value) {
    int hashValue = hashFunction(key);
    auto& cell = table[hashValue]; 
    auto bItr = begin(cell); 
    bool keyExists = false; 
    for (; bItr != end(cell); bItr++) {
        if (bItr->first == key) {
            keyExists = true;
            bItr->second = value;
            cout << "[WARNING] Key exists. Value replaced." << endl;
            break;
        }
    }

    if (!keyExists) { 
        cell.emplace_back(key, value);
    }

    return;
}

void HashTable::removeItem(int key) {
    int hashValue = hashFunction(key);
    auto& cell = table[hashValue]; 
    auto bItr = begin(cell); 
    bool keyExists = false; 
    for (; bItr != end(cell); bItr++) {
        if (bItr->first == key) {
            keyExists = true;
            bItr = cell.erase(bItr);
            cout << "[INFO] Item removed." << endl;
            break;
        }
    }

    if (!keyExists) {
        cout << "[WARNING] Key not found. Pair not removed." << endl;
    }

    return;
}

void HashTable::printTable() {
    for (int i{}; i < hashGroups; i++) {
        if (table[i].size() == 0) continue;

        auto bItr = table[i].begin();
        for (; bItr != table[i].end(); bItr++) {
            cout << "[INFO] Key: " << bItr->first << " Value: " << bItr->second << endl;
        }
    }
    return;
}

int main() {
    HashTable HT;

    if (HT.isEmpty()) {
        cout << "Correct answer. Good job." << endl;
    } else {
        cout << "Oh oh. We need to check out code!" << endl;
    }

    HT.insertItem(905, "Jim");
    HT.insertItem(201, "Bob");
    HT.insertItem(332, "Saul");
    HT.insertItem(802, "Walter");
    HT.insertItem(707, "Sandy");
    HT.insertItem(129, "Tom");
    HT.insertItem(725, "Alice");

    HT.printTable();

    HT.removeItem(332);
    HT.removeItem(100);


    if (HT.isEmpty()) {
        cout << "Oh oh. We need to check out code!"  << endl;
    } else {
        cout << "Correct answer. Good job." << endl;
    }

    return 0;
}

#+end_src 
